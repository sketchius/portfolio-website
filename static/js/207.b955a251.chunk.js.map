{"version":3,"file":"static/js/207.b955a251.chunk.js","mappings":"2bAMMA,EAAO,WACZ,OACC,gCACC,4VAMA,gBAAKC,IAAKC,EAAaC,IAAI,yCAAyCC,UAAU,iBAC9E,sbAMA,gDACmB,wDAAwC,QAE3D,gFACsD,KACrD,cAAGC,KAAK,sEAAqE,SAC3E,+BACG,IAAG,qGAC2F,KACnG,oIAID,gBAAKJ,IAAKK,EAAYH,IAAI,qBAAqBC,UAAU,iBACzD,sKAEsC,mCAAe,sEACtC,mCAAiB,6BAAyB,mCAAiB,+FAG1E,gBAAKH,IAAKM,EAAYJ,IAAI,qBAAqBC,UAAU,iBACzD,wQAGkC,mCAAiB,oHAGnD,+LAIA,gBAAKH,IAAKO,EAAYL,IAAI,qBAAqBC,UAAU,iBACzD,sGACA,2BACC,2EACA,gFACA,sEAED,+CAGH,EAEaK,EAAO,CACnBC,MAAO,yBACPC,UAAWC,EACXC,aAAc,6BACdC,QAAS,mEACTC,SAAU,8CACVC,OAAQ,gBACRC,WAAY,IACZC,YAAa,YACbC,MAAM,SAACnB,EAAI,I","sources":["blog/article/deconstructed-blueprint/index.js"],"sourcesContent":["import MainImage from './media/main-image.jpg';\r\nimport SketchImage from './media/sketch.png';\r\nimport Step1Image from './media/step1.png';\r\nimport Step2Image from './media/step2.png';\r\nimport Step3Image from './media/step3.png';\r\n\r\nconst Body = () => {\r\n\treturn (\r\n\t\t<article>\r\n\t\t\t<p>\r\n\t\t\t\tWireframes are an excellent tool for web design. They allow you to brainstorm layout ideas, help\r\n\t\t\t\tcommunicate designs, and act as a blueprint for your code. In this article, I'm going to focus on that\r\n\t\t\t\tlast one. Let's say you're making a forum post component and have sketched out a wireframe design like\r\n\t\t\t\tthe image below.\r\n\t\t\t</p>\r\n\t\t\t<img src={SketchImage} alt='sketch design for forum post component' className='large-image' />\r\n\t\t\t<p>\r\n\t\t\t\tAt this point, you could jump in and start coding. Do you ever find yourself getting mixed up about\r\n\t\t\t\twhich elements belong to which containers? How about what classname you used for a particular element? I\r\n\t\t\t\tknow I do from time to time. A simple wireframe sketch doesn't help so much with these issues. Instead,\r\n\t\t\t\tI find myself scrolling through a sea of HTML tags and selectors trying to keep everything straight.\r\n\t\t\t</p>\r\n\t\t\t<h2>\r\n\t\t\t\tIntroducting: the <strong>deconstructed wireframe</strong>.\r\n\t\t\t</h2>\r\n\t\t\t<p>\r\n\t\t\t\tWhat is a deconstructed wireframe? It's basically an{' '}\r\n\t\t\t\t<a href='https://www.google.com/search?q=exploded+view+illustration&tbm=isch'>\r\n\t\t\t\t\t{'exploded view illustration'}\r\n\t\t\t\t</a>{' '}\r\n\t\t\t\tof your component, so you can see the containers individually. All you need is a pencil and paper!{' '}\r\n\t\t\t\t<small>\r\n\t\t\t\t\tNote: I've used Illustrator for these Illustrations, but that was just to make them look pretty.\r\n\t\t\t\t</small>\r\n\t\t\t</p>\r\n\t\t\t<img src={Step1Image} alt='step 1 illutration' className='large-image' />\r\n\t\t\t<p>\r\n\t\t\t\tStart by drawing the outermost container. Label it with what you expect to use as a semantic tag or\r\n\t\t\t\tclass name. Next, draw in all of its <em>direct</em> children. For this container, there are two direct\r\n\t\t\t\tchildren: the <code>user</code> section on left and the <code>post</code> section on the right. Draw a\r\n\t\t\t\tthin line to show the seperation between child containers.\r\n\t\t\t</p>\r\n\t\t\t<img src={Step2Image} alt='step 2 illutration' className='large-image' />\r\n\t\t\t<p>\r\n\t\t\t\tNext, redraw each of the child containers below the original, again providing a label at the top and\r\n\t\t\t\tdrawing in their direct children. Draw arrows from the first container to the redrawn children. Note\r\n\t\t\t\tthat some of the children of our <code>post</code> section don’t have any of their own children. For\r\n\t\t\t\tthese we’ll give them a clear and concise label.\r\n\t\t\t</p>\r\n\t\t\t<p>\r\n\t\t\t\tContinue this process until we’ve iterated through all of the layers, making sure to draw each step\r\n\t\t\t\tbelow the previous. Out example just needs one more step:\r\n\t\t\t</p>\r\n\t\t\t<img src={Step3Image} alt='step 3 illutration' className='large-image' />\r\n\t\t\t<p>That’s it! Now we have a simple reference that shows us at a glance:</p>\r\n\t\t\t<ul>\r\n\t\t\t\t<li>The hierarchy of elements from top to bottom.</li>\r\n\t\t\t\t<li>The class name or semantic tag for each container.</li>\r\n\t\t\t\t<li>A label for each childless component.</li>\r\n\t\t\t</ul>\r\n\t\t\t<h2>Other techniques</h2>\r\n\t\t</article>\r\n\t);\r\n};\r\n\r\nexport const data = {\r\n\ttitle: 'Explode your wireframe',\r\n\tmainImage: MainImage,\r\n\tmainImageAlt: 'exploded view illustration',\r\n\tcaption: 'A technique to help streamline your layout and styling workflow.',\r\n\tsubTitle: 'Deconstructing a design to make a blueprint',\r\n\tauthor: 'Bryce Huhtala',\r\n\tauthorLink: '/',\r\n\tpublishDate: '11/5/2022',\r\n\tbody: <Body />,\r\n};\r\n\r\n// export const Card = props => {\r\n// \treturn (\r\n// \t\t<div className='blog'>\r\n// \t\t\t<BlogCard\r\n// \t\t\t\tmainImage={MainImage}\r\n// \t\t\t\tcaption={data.caption}\r\n// \t\t\t\ttitle={data.title}\r\n// \t\t\t\tsubTitle={data.subTitle}\r\n// \t\t\t\tauthor={data.author}\r\n// \t\t\t\tauthorLink={data.authorLink}\r\n// \t\t\t\tpublishDate={data.publishDate}\r\n// \t\t\t\tbody={<Body />}\r\n// \t\t\t/>\r\n// \t\t</div>\r\n// \t);\r\n// };\r\n"],"names":["Body","src","SketchImage","alt","className","href","Step1Image","Step2Image","Step3Image","data","title","mainImage","MainImage","mainImageAlt","caption","subTitle","author","authorLink","publishDate","body"],"sourceRoot":""}